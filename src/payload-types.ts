/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    sources: Source;
    media: Media;
    journals: Journal;
    tasks: Task;
    posts: Post;
    atoms: Atom;
    'source-categories': SourceCategory;
    synthesizedAtoms: SynthesizedAtom;
    synthesisMethods: SynthesisMethod;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    sources: {
      relatedAtoms: 'atoms';
    };
    atoms: {
      synthesizedAtoms: 'synthesizedAtoms';
    };
    synthesizedAtoms: {
      posts: 'posts';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    sources: SourcesSelect<false> | SourcesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    journals: JournalsSelect<false> | JournalsSelect<true>;
    tasks: TasksSelect<false> | TasksSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    atoms: AtomsSelect<false> | AtomsSelect<true>;
    'source-categories': SourceCategoriesSelect<false> | SourceCategoriesSelect<true>;
    synthesizedAtoms: SynthesizedAtomsSelect<false> | SynthesizedAtomsSelect<true>;
    synthesisMethods: SynthesisMethodsSelect<false> | SynthesisMethodsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    agent: Agent;
  };
  globalsSelect: {
    agent: AgentSelect<false> | AgentSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sources".
 */
export interface Source {
  id: number;
  title: string;
  sourceCategory?: (number | null) | SourceCategory;
  url: string;
  author?: string | null;
  publishedDate?: string | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  oneSentenceSummary: string;
  /**
   * Main points from the source
   */
  mainPoints?:
    | {
        /**
         * A main point
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * List of bullet points summarizing the source
   */
  bulletSummary?:
    | {
        /**
         * A bullet point
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * List of people, places, things, and events mentioned
   */
  peopleplacesthingsevents?:
    | {
        /**
         * A person, place, thing, or event
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Important quotations from the source
   */
  quotations?:
    | {
        /**
         * A quotation
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Additional details about the source
   */
  details?:
    | {
        /**
         * A detail
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * The ID of the source embedding in Pinecone
   */
  pineconeId?: string | null;
  /**
   * Synthesized atoms related to this source
   */
  relatedSynthesizedAtoms?: (number | SynthesizedAtom)[] | null;
  fullText?: (number | null) | Media;
  /**
   * Atoms derived from this source
   */
  relatedAtoms?: {
    docs?: (number | Atom)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "source-categories".
 */
export interface SourceCategory {
  id: number;
  title: string;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "synthesizedAtoms".
 */
export interface SynthesizedAtom {
  id: number;
  title: string;
  /**
   * The full atomic idea (1-2 sentences)
   */
  mainContent: string;
  /**
   * Additional information that supports this atom
   */
  supportingInfo?:
    | {
        /**
         * Supporting information item
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * A short paragraph, styled as a fictional quote, that imagines a future where the concept is realized.
   */
  theoryFiction?: string | null;
  parentAtoms: (number | Atom)[];
  synthesisMethod?: (number | null) | SynthesisMethod;
  pineconeId?: string | null;
  /**
   * Posts created from this atom
   */
  posts?: {
    docs?: (number | Post)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "atoms".
 */
export interface Atom {
  id: number;
  /**
   * The title of the atom
   */
  title?: string | null;
  /**
   * The ID of the atom in Pinecone
   */
  pineconeId?: string | null;
  /**
   * The full atomic idea (1-2 sentences)
   */
  mainContent: string;
  /**
   * A quote from the Source that supports this atom
   */
  supportingQuote?: string | null;
  /**
   * Additional information that supports this atom
   */
  supportingInfo?:
    | {
        /**
         * Supporting information item
         */
        text?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * The source this atom is derived from
   */
  source: number | Source;
  /**
   * Synthesized atoms derived from this atom
   */
  synthesizedAtoms?: {
    docs?: (number | SynthesizedAtom)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "synthesisMethods".
 */
export interface SynthesisMethod {
  id: number;
  title: string;
  description: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  synthesizedAtom?: (number | null) | SynthesizedAtom;
  content: {
    text: string;
    media?: (number | null) | Media;
    id?: string | null;
  }[];
  timeCreated?: string | null;
  twitterPost?: {
    posted?: boolean | null;
    url?: string | null;
    postId?: string | null;
  };
  bskyPost?: {
    posted?: boolean | null;
    url?: string | null;
    postId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  _key?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journals".
 */
export interface Journal {
  id: number;
  timeCreated?: string | null;
  content?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks".
 */
export interface Task {
  id: number;
  title?: string | null;
  task?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'sources';
        value: number | Source;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'journals';
        value: number | Journal;
      } | null)
    | ({
        relationTo: 'tasks';
        value: number | Task;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'atoms';
        value: number | Atom;
      } | null)
    | ({
        relationTo: 'source-categories';
        value: number | SourceCategory;
      } | null)
    | ({
        relationTo: 'synthesizedAtoms';
        value: number | SynthesizedAtom;
      } | null)
    | ({
        relationTo: 'synthesisMethods';
        value: number | SynthesisMethod;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sources_select".
 */
export interface SourcesSelect<T extends boolean = true> {
  title?: T;
  sourceCategory?: T;
  url?: T;
  author?: T;
  publishedDate?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  oneSentenceSummary?: T;
  mainPoints?:
    | T
    | {
        text?: T;
        id?: T;
      };
  bulletSummary?:
    | T
    | {
        text?: T;
        id?: T;
      };
  peopleplacesthingsevents?:
    | T
    | {
        text?: T;
        id?: T;
      };
  quotations?:
    | T
    | {
        text?: T;
        id?: T;
      };
  details?:
    | T
    | {
        text?: T;
        id?: T;
      };
  pineconeId?: T;
  relatedSynthesizedAtoms?: T;
  fullText?: T;
  relatedAtoms?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  _key?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "journals_select".
 */
export interface JournalsSelect<T extends boolean = true> {
  timeCreated?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tasks_select".
 */
export interface TasksSelect<T extends boolean = true> {
  title?: T;
  task?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  synthesizedAtom?: T;
  content?:
    | T
    | {
        text?: T;
        media?: T;
        id?: T;
      };
  timeCreated?: T;
  twitterPost?:
    | T
    | {
        posted?: T;
        url?: T;
        postId?: T;
      };
  bskyPost?:
    | T
    | {
        posted?: T;
        url?: T;
        postId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "atoms_select".
 */
export interface AtomsSelect<T extends boolean = true> {
  title?: T;
  pineconeId?: T;
  mainContent?: T;
  supportingQuote?: T;
  supportingInfo?:
    | T
    | {
        text?: T;
        id?: T;
      };
  source?: T;
  synthesizedAtoms?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "source-categories_select".
 */
export interface SourceCategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "synthesizedAtoms_select".
 */
export interface SynthesizedAtomsSelect<T extends boolean = true> {
  title?: T;
  mainContent?: T;
  supportingInfo?:
    | T
    | {
        text?: T;
        id?: T;
      };
  theoryFiction?: T;
  parentAtoms?: T;
  synthesisMethod?: T;
  pineconeId?: T;
  posts?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "synthesisMethods_select".
 */
export interface SynthesisMethodsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agent".
 */
export interface Agent {
  id: number;
  name: string;
  bio?: string | null;
  styles?: string | null;
  scheduling?: {
    postingInterval?: number | null;
    sleepStartHour?: number | null;
    sleepEndHour?: number | null;
    jitter?: number | null;
    enabled?: boolean | null;
  };
  /**
   * Session cookies for Twitter, automatically managed. Do not edit manually unless necessary.
   */
  twitterCookieData?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agent_select".
 */
export interface AgentSelect<T extends boolean = true> {
  name?: T;
  bio?: T;
  styles?: T;
  scheduling?:
    | T
    | {
        postingInterval?: T;
        sleepStartHour?: T;
        sleepEndHour?: T;
        jitter?: T;
        enabled?: T;
      };
  twitterCookieData?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}